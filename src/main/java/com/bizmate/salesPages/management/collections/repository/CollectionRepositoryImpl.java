package com.bizmate.salesPages.management.collections.repository;

import com.bizmate.common.dto.PageRequestDTO;
import com.bizmate.salesPages.client.domain.QClient;
import com.bizmate.salesPages.management.collections.domain.Collection;
import com.bizmate.salesPages.management.collections.domain.QCollection;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQuery;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;
import org.springframework.util.StringUtils;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

@Slf4j
public class CollectionRepositoryImpl extends QuerydslRepositorySupport implements CollectionRepositoryCustom {

    private final JPAQueryFactory queryFactory;

    public CollectionRepositoryImpl(JPAQueryFactory queryFactory) {
        super(Collection.class);
        this.queryFactory = queryFactory;
    }

    @Override
    public Page<Collection> searchCollection(PageRequestDTO pageRequestDTO, Pageable pageable) {

        QCollection collection = QCollection.collection;
        QClient client = QClient.client;

        JPAQuery<Collection> query = queryFactory
                .selectFrom(collection)
                .leftJoin(collection.client, client)
                .where(createSearchConditions(pageRequestDTO, collection, client)); // üëà 3. client Ï†ÑÎã¨

        // 1. Count ÏøºÎ¶¨ Ïã§Ìñâ
        long total = query.fetchCount();

        // 2. Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÏøºÎ¶¨
        List<Collection> content = getQuerydsl().applyPagination(pageable, query).fetch();

        return new PageImpl<>(content, pageable, total);
    }

    /**
     * DTOÏùò Í≤ÄÏÉâ Ï°∞Í±¥(startDate, endDate, minAmount, maxAmount, search, keyword)ÏùÑ
     * Í∏∞Î∞òÏúºÎ°ú QuerydslÏùò BooleanBuilder (WHERE Ï°∞Í±¥)Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
     */
    private BooleanBuilder createSearchConditions(PageRequestDTO pageRequestDTO, QCollection collection, QClient client) {
        BooleanBuilder booleanBuilder = new BooleanBuilder();

        // --- üîΩ 4. ÎÇ†Ïßú Í∏∞Í∞Ñ Í≤ÄÏÉâ (startDate, endDate) üîΩ ---
        LocalDate startDate = pageRequestDTO.getStartDate();
        LocalDate endDate = pageRequestDTO.getEndDate();

        if (startDate != null && endDate != null) {
            booleanBuilder.and(collection.collectionDate.between(startDate, endDate));
        } else if (startDate != null) {
            booleanBuilder.and(collection.collectionDate.goe(startDate)); // >=
        } else if (endDate != null) {
            booleanBuilder.and(collection.collectionDate.loe(endDate)); // <=
        }

        // --- üîΩ 5. Í∏àÏï° Î≤îÏúÑ Í≤ÄÏÉâ (minAmount, maxAmount) üîΩ ---
        BigDecimal minAmount = pageRequestDTO.getMinAmount();
        BigDecimal maxAmount = pageRequestDTO.getMaxAmount();

        if (minAmount != null && maxAmount != null) {
            booleanBuilder.and(collection.collectionMoney.between(minAmount, maxAmount));
        } else if (minAmount != null) {
            booleanBuilder.and(collection.collectionMoney.goe(minAmount)); // >=
        } else if (maxAmount != null) {
            booleanBuilder.and(collection.collectionMoney.loe(maxAmount)); // <=
        }

        // --- üîΩ 6. ÌÖçÏä§Ìä∏ ÌÇ§ÏõåÎìú Í≤ÄÏÉâ (search, keyword) üîΩ ---
        String searchType = pageRequestDTO.getSearch();
        String keyword = pageRequestDTO.getKeyword();

        if (StringUtils.hasText(searchType) && StringUtils.hasText(keyword)) {

            switch (searchType) {
                case "c": // Í±∞ÎûòÏ≤òÎ™Ö
                    booleanBuilder.and(client.clientCompany.containsIgnoreCase(keyword));
                    break;
                case "w": // ÏûëÏÑ±Ïûê
                    booleanBuilder.and(collection.writer.containsIgnoreCase(keyword));
                    break;
                case "n": // ÎπÑÍ≥†
                    booleanBuilder.and(collection.collectionNote.containsIgnoreCase(keyword));
                    break;
                case "all": // Ï†ÑÏ≤¥ (Í±∞ÎûòÏ≤òÎ™Ö OR ÏûëÏÑ±Ïûê OR ÎπÑÍ≥†)
                    booleanBuilder.and(
                            client.clientCompany.containsIgnoreCase(keyword)
                                    .or(collection.writer.containsIgnoreCase(keyword))
                                    .or(collection.collectionNote.containsIgnoreCase(keyword))
                    );
                    break;
            }
        }

        return booleanBuilder;
    }
}