package com.bizmate.hr.service;

import com.bizmate.hr.domain.Department;
import com.bizmate.hr.domain.Employee;
import com.bizmate.hr.domain.UserEntity;
import com.bizmate.hr.domain.code.Grade;
import com.bizmate.hr.domain.code.Position;
import com.bizmate.hr.dto.employee.*;
import com.bizmate.hr.repository.*;

import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Transactional
public class EmployeeServiceImpl implements EmployeeService {

    private final EmployeeRepository employeeRepository;
    private final DepartmentRepository departmentRepository;
    private final PositionRepository positionRepository;
    private final GradeRepository gradeRepository;
    private final UserService userService;
    private final UserRepository userRepository;



    @Override
    @Transactional(readOnly = true)
    public List<EmployeeDTO> getAllEmployees() {
        return employeeRepository.findAllWithDepartmentAndPosition().stream()
                .map(EmployeeDTO::fromEntity)
                .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public EmployeeDTO getEmployee(Long empId) {
        Employee employee = employeeRepository.findByIdWithDepartmentAndPosition(empId)
                .orElseThrow(() -> new EntityNotFoundException("ÏÇ¨Ïõê ID " + empId + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
        return EmployeeDTO.fromEntity(employee);
    }

    @Override
    public EmployeeDTO createEmployee(EmployeeCreateRequestDTO dto) {
        // ‚úÖ 1. Î∂ÄÏÑú ÏΩîÎìúÎ°ú Îã§Ïùå ÏÇ¨Î≤à ÏÉùÏÑ±
        Department dept = departmentRepository.findByDeptCode(dto.getDeptCode())
                .orElseThrow(() -> new EntityNotFoundException("Î∂ÄÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

        String empNo = generateEmpNo(dto.getDeptCode());  // ÏûêÎèô ÏÉùÏÑ±

        // üîπ FK ÏóîÌã∞Ìã∞ Ï°∞Ìöå
        Department department = departmentRepository.findByDeptCode(dto.getDeptCode())
                .orElseThrow(() -> new EntityNotFoundException("Î∂ÄÏÑú ID " + dto.getDeptCode() + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
        Position position = positionRepository.findById(dto.getPositionCode())
                .orElseThrow(() -> new EntityNotFoundException("ÏßÅÏ±Ö ÏΩîÎìú " + dto.getPositionCode() + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
        Grade grade = gradeRepository.findById(dto.getGradeCode())
                .orElseThrow(() -> new EntityNotFoundException("ÏßÅÍ∏â ÏΩîÎìú " + dto.getGradeCode() + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

        // üîπ Í∏∞Î≥∏ ÌïÑÎìú Îß§Ìïë
        Employee employee = new Employee();
        employee.setEmpNo(empNo);
        employee.setEmpName(dto.getEmpName());
        employee.setGender(dto.getGender());
        employee.setBirthDate(dto.getBirthDate());
        employee.setPhone(dto.getPhone());
        employee.setEmail(dto.getEmail());
        employee.setAddress(dto.getAddress());
        employee.setDepartment(department);
        employee.setPosition(position);
        employee.setGrade(grade);
        employee.setStartDate(dto.getStartDate());
        employee.setStatus("ACTIVE");

        // üîπ Ï†ÄÏû•
        Employee savedEmployee = employeeRepository.save(employee);

        // üîπ Ïã†Í∑ú ÏßÅÏõêÏùº Í≤ΩÏö∞ ÏûêÎèô Í≥ÑÏ†ï ÏÉùÏÑ±

        userService.createUserAccount(savedEmployee);

        return EmployeeDTO.fromEntity(savedEmployee);
    }

    @Override
    @Transactional
    public EmployeeDTO updateMyInfo(Long empId, EmployeeUpdateRequestDTO requestDTO) {
        // 1. Í∏∞Ï°¥ ÏßÅÏõê Ï°∞Ìöå (getEmployee Î©îÏÑúÎìúÏóêÏÑú Ïù¥ÎØ∏ Ïù¥ Î°úÏßÅÏùÑ ÏÇ¨Ïö©ÌïòÍ≥† ÏûàÏùå)
        Employee employee = employeeRepository.findById(empId)
                .orElseThrow(() -> new EntityNotFoundException("ÏÇ¨Ïõê ID " + empId + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

        // 2. Î≥∏Ïù∏ ÏàòÏ†ï Í∞ÄÎä• ÌïÑÎìúÎßå Î∞òÏòÅ
        // üí° null Ï≤¥ÌÅ¨Î•º ÌÜµÌï¥ Ï†ÑÏÜ°Îêú Í∞íÎßå Î∞òÏòÅÎêòÎèÑÎ°ù Ìï† Ïàò ÏûàÏßÄÎßå, DTOÏóêÏÑú @NotNullÏùÑ ÏÇ¨Ïö©ÌñàÎã§Î©¥ ÏÉùÎûµ Í∞ÄÎä•Ìï©ÎãàÎã§.
        employee.setPhone(requestDTO.getPhone());
        employee.setEmail(requestDTO.getEmail());
        employee.setAddress(requestDTO.getAddress());

        // 3. Í¥ÄÎ¶¨Ïûê Ï†ÑÏö© ÌïÑÎìú (Î∂ÄÏÑú, ÏßÅÍ∏â, ÏßÅÏ±Ö, ÏÉÅÌÉú Îì±)Îäî ÏïÑÏòà Í±¥ÎìúÎ¶¨ÏßÄ ÏïäÏùå
        // **[ÌïµÏã¨] FK Î≥ÄÍ≤Ω Î°úÏßÅ Î∞è Í¥ÄÎ¶¨Ïûê Ìï≠Î™© Î°úÏßÅ Î™®Îëê Ï†úÍ±∞**

        // 4. Ï†ÄÏû•
        Employee updated = employeeRepository.save(employee);

        // 5. User Ï†ïÎ≥¥ ÎèôÍ∏∞Ìôî Î°úÏßÅ (syncUserInfo)ÎèÑ Ï†úÍ±∞
        // **[ÌïµÏã¨] Ï†ÑÌôîÎ≤àÌò∏, Ïù¥Î©îÏùº, Ï£ºÏÜå Î≥ÄÍ≤ΩÏùÄ ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥ÏôÄ Î¨¥Í¥ÄÌïòÎØÄÎ°ú ÎèôÍ∏∞Ìôî Î∂àÌïÑÏöî**

        return EmployeeDTO.fromEntity(updated);
    }

    @Override
    public EmployeeDTO updateEmployee(Long empId, EmployeeUpdateRequestDTO requestDTO) {
        // üîπ Í∏∞Ï°¥ ÏßÅÏõê Ï°∞Ìöå
        Employee employee = employeeRepository.findById(empId)
                .orElseThrow(() -> new EntityNotFoundException("ÏÇ¨Ïõê ID " + empId + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

        // üîπ ÏàòÏ†ï Í∞ÄÎä•Ìïú ÌïÑÎìúÎßå Î∞òÏòÅ
        employee.setPhone(requestDTO.getPhone());
        employee.setEmail(requestDTO.getEmail());
        employee.setAddress(requestDTO.getAddress());

        // üîπ FK Î≥ÄÍ≤Ω(ÏÑ†ÌÉùÏ†Å)
        if (requestDTO.getDeptCode() != null) {
            Department dept = departmentRepository.findByDeptCode(requestDTO.getDeptCode())
                    .orElseThrow(() -> new EntityNotFoundException("Î∂ÄÏÑú ÏΩîÎìú " + requestDTO.getDeptCode() + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
            employee.setDepartment(dept);
        }

        if (requestDTO.getPositionCode() != null) {
            Position pos = positionRepository.findById(requestDTO.getPositionCode())
                    .orElseThrow(() -> new EntityNotFoundException("ÏßÅÏ±Ö ÏΩîÎìú " + requestDTO.getPositionCode() + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
            employee.setPosition(pos);
        }

        if (requestDTO.getGradeCode() != null) {
            Grade grade = gradeRepository.findById(requestDTO.getGradeCode())
                    .orElseThrow(() -> new EntityNotFoundException("ÏßÅÍ∏â ÏΩîÎìú " + requestDTO.getGradeCode() + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
            employee.setGrade(grade);
        }

        // üîπ Ï†ÄÏû•
        Employee updatedEmployee = employeeRepository.save(employee);

        // üîπ User Ï†ïÎ≥¥ ÎèôÍ∏∞Ìôî
        syncUserInfo(updatedEmployee);

        return EmployeeDTO.fromEntity(updatedEmployee);
    }





    @Override
    public void deleteEmployee(Long empId) {
        employeeRepository.deleteById(empId);
    }

    @Override
    public EmployeeDetailDTO getEmployeeDetail(Long empId) {
        Employee employee = employeeRepository.findEmployeeDetailById(empId)
                .orElseThrow(()-> new EntityNotFoundException("ÏßÅÏõêÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"));
        return EmployeeDetailDTO.fromEntity(employee);
    }


    /**
     * üîπ ÏßÅÏõê Ï†ïÎ≥¥ Î≥ÄÍ≤Ω Ïãú UserEntityÏùò Î≥µÏ†ú ÌïÑÎìúÎ•º ÎèôÍ∏∞ÌôîÌïòÎäî Î©îÏÑúÎìú
     */
    public void syncUserInfo(Employee employee) {
        UserEntity user = userRepository.findByEmployee(employee)
                .orElseThrow(() -> new EntityNotFoundException("Ïó∞Í≤∞Îêú ÏÇ¨Ïö©Ïûê Í≥ÑÏ†ïÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

        user.setEmpName(employee.getEmpName());
        user.setEmail(employee.getEmail());
        user.setPhone(employee.getPhone());
        user.setDeptName(employee.getDepartment().getDeptName());
        user.setPositionName(employee.getPosition().getPositionName());
        user.setDeptCode(employee.getDepartment().getDeptCode());
        userRepository.save(user);
    }



    // ===============================
    // üîπ ÏÇ¨Î≤à ÏûêÎèô ÏÉùÏÑ± Î°úÏßÅ
    // ===============================
    @Override
    @Transactional(readOnly = true)
    public String generateEmpNo(String deptCode) {
        Department dept = departmentRepository.findByDeptCode(deptCode)
                .orElseThrow(() -> new EntityNotFoundException("Î∂ÄÏÑú ID " + deptCode + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

        String companyCode = "50"; // Í≥†Ï†ï
        String Code = dept.getDeptCode(); // Ïòà: "31"
        long count = employeeRepository.countByDepartment_DeptCode(Code);
        String sequence = String.format("%03d", count + 1);

        return companyCode + Code + sequence; // Ïòà: 5031001
    }
}
