package com.bizmate.hr.service;

import com.bizmate.hr.domain.Department;
import com.bizmate.hr.domain.Employee;
import com.bizmate.hr.domain.UserEntity;
import com.bizmate.hr.domain.code.Grade;
import com.bizmate.hr.domain.code.Position;
import com.bizmate.hr.dto.employee.EmployeeDTO;
import com.bizmate.hr.dto.employee.EmployeeDetailDTO;
import com.bizmate.hr.dto.employee.EmployeeRequestDTO;
import com.bizmate.hr.repository.*;

import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Transactional
public class EmployeeServiceImpl implements EmployeeService {

    private final EmployeeRepository employeeRepository;
    private final DepartmentRepository departmentRepository;
    private final PositionRepository positionRepository;
    private final GradeRepository gradeRepository;
    private final UserService userService;
    private final UserRepository userRepository;

    @Override
    @Transactional(readOnly = true)
    public List<EmployeeDTO> getAllEmployees() {
        return employeeRepository.findAllWithDepartmentAndPosition().stream()
                .map(EmployeeDTO::fromEntity)
                .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public EmployeeDTO getEmployee(Long empId) {
        Employee employee = employeeRepository.findByIdWithDepartmentAndPosition(empId)
                .orElseThrow(() -> new EntityNotFoundException("ÏÇ¨Ïõê ID " + empId + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
        return EmployeeDTO.fromEntity(employee);
    }

    @Override
    public EmployeeDTO saveEmployee(Long empId, EmployeeRequestDTO requestDTO) {
        Employee employee;

        if (empId != null) {
            // ÏàòÏ†ï Î™®Îìú
            employee = employeeRepository.findById(empId)
                    .orElseThrow(() -> new EntityNotFoundException("ÏÇ¨Ïõê ID " + empId + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
        } else {
            // Ïã†Í∑ú Îì±Î°ù
            employee = new Employee();
            // üîπ ÏûêÎèô ÏÇ¨Î≤à ÏÉùÏÑ± (DTOÏóêÏÑú Î∞õÏßÄ ÏïäÏùå)
            String empNo = generateEmpNo(requestDTO.getDeptCode());
            employee.setEmpNo(empNo);


        }


        // üîπ FK ÏóîÌã∞Ìã∞ Ï°∞Ìöå
        Department department = departmentRepository.findByDeptCode(requestDTO.getDeptCode())
                .orElseThrow(() -> new EntityNotFoundException("Î∂ÄÏÑú ID " + requestDTO.getDeptCode() + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
        Position position = positionRepository.findById(requestDTO.getPositionCode())
                .orElseThrow(() -> new EntityNotFoundException("ÏßÅÏ±Ö ÏΩîÎìú " + requestDTO.getPositionCode() + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
        Grade grade = gradeRepository.findById(requestDTO.getGradeCode())
                .orElseThrow(() -> new EntityNotFoundException("ÏßÅÍ∏â ÏΩîÎìú " + requestDTO.getGradeCode() + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

        // üîπ Í∏∞Î≥∏ ÌïÑÎìú Îß§Ìïë
        employee.setEmpName(requestDTO.getEmpName());
        employee.setPhone(requestDTO.getPhone());
        employee.setEmail(requestDTO.getEmail());
        employee.setStartDate(requestDTO.getStartDate());
        employee.setDepartment(department);
        employee.setPosition(position);
        employee.setGrade(grade);
        employee.setStatus(requestDTO.getStatus() != null
                ? requestDTO.getStatus().trim().toUpperCase()
                : "ACTIVE");

        // üîπ Ï†ÄÏû•
        Employee savedEmployee = employeeRepository.save(employee);

        // üîπ Ïã†Í∑ú ÏßÅÏõêÏùº Í≤ΩÏö∞ ÏûêÎèô Í≥ÑÏ†ï ÏÉùÏÑ±
        if (empId == null) {
            userService.createUserAccount(savedEmployee);
        } else {
            //ÏàòÏ†ïÏãú uesrÏ†ïÎ≥¥ ÎèôÍ∏∞Ìôî
            syncUserInfo(savedEmployee);
        }

        return EmployeeDTO.fromEntity(savedEmployee);
    }

    @Override
    public void deleteEmployee(Long empId) {
        employeeRepository.deleteById(empId);
    }

    @Override
    public EmployeeDetailDTO getEmployeeDetail(Long empId) {
        Employee employee = employeeRepository.findEmployeeDetailById(empId)
                .orElseThrow(()-> new EntityNotFoundException("ÏßÅÏõêÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"));
        return EmployeeDetailDTO.fromEntity(employee);
    }




    /**
     * üîπ ÏßÅÏõê Ï†ïÎ≥¥ Î≥ÄÍ≤Ω Ïãú UserEntityÏùò Î≥µÏ†ú ÌïÑÎìúÎ•º ÎèôÍ∏∞ÌôîÌïòÎäî Î©îÏÑúÎìú
     */
    public void syncUserInfo(Employee employee) {
        UserEntity user = userRepository.findByEmployee(employee)
                .orElseThrow(() -> new EntityNotFoundException("Ïó∞Í≤∞Îêú ÏÇ¨Ïö©Ïûê Í≥ÑÏ†ïÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

        user.setEmpName(employee.getEmpName());
        user.setEmail(employee.getEmail());
        user.setPhone(employee.getPhone());
        user.setDeptName(employee.getDepartment().getDeptName());
        user.setPositionName(employee.getPosition().getPositionName());
        user.setDeptCode(employee.getDepartment().getDeptCode());
        userRepository.save(user);
    }



    // ===============================
    // üîπ ÏÇ¨Î≤à ÏûêÎèô ÏÉùÏÑ± Î°úÏßÅ
    // ===============================
    @Override
    @Transactional(readOnly = true)
    public String generateEmpNo(String deptCode) {
        Department dept = departmentRepository.findByDeptCode(deptCode)
                .orElseThrow(() -> new EntityNotFoundException("Î∂ÄÏÑú ID " + deptCode + "Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

        String companyCode = "50"; // Í≥†Ï†ï
        String Code = dept.getDeptCode(); // Ïòà: "31"
        long count = employeeRepository.countByDepartment_DeptCode(Code);
        String sequence = String.format("%03d", count + 1);

        return companyCode + Code + sequence; // Ïòà: 5031001
    }
}
